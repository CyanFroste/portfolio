---
import RootLayout from '../layouts/RootLayout.astro'
import { isLight } from '../utils'
import { THEME_MAP } from '../constants'
---

<RootLayout title="Themes">
  <div class="flex flex-col items-center px-4 py-16 gap-16">
    {
      Object.entries(THEME_MAP).map(([name, theme]) => {
        const background = `linear-gradient(45deg, ${theme.colors.primary}, ${theme.colors.secondary})`

        return (
          <div class="theme p-4 flex flex-col gap-2 bg-gray-100 relative" data-name={name} data-active={false}>
            <div class="absolute -inset-1 -z-[1] animate-gradient" style={{ background }} />
            <div class="absolute -inset-1 -z-[1] animate-gradient blur-lg opacity-60" style={{ background }} />

            <button class="flex">
              <span
                class="text-6xl leading-normal font-title !bg-clip-text text-transparent animate-gradient"
                style={{ background }}>
                {name}
              </span>

              <span
                data-status="not-applied"
                class="indicator 
                ml-auto px-3 py-1 tracking-wider text-sm border-2 font-semibold border-gray-600 text-gray-600 rounded-full
                data-[status=applied]:bg-gray-600 data-[status=applied]:text-gray-100"
              />
            </button>

            <h3 class="text-lg">Colors</h3>

            {Object.entries(theme.colors).map(([category, values]) => (
              <div class="flex flex-col gap-2 pl-2">
                <h4 class="text-sm capitalize text-gray-600">{category}</h4>

                <ul class="flex items-center">
                  {values.map((color, index) => (
                    <li
                      class="py-2 px-4 font-mono flex flex-col"
                      style={{ backgroundColor: color, color: theme.colors.gray.at(isLight(color) ? -1 : 0) }}>
                      {(index + 1) * 100}
                      {color}
                    </li>
                  ))}
                </ul>
              </div>
            ))}

            <h3 class="text-lg">Fonts</h3>

            <div class="flex items-center gap-12 pl-2">
              {Object.entries(theme.fontFamily).map(([category, value]) => (
                <div class="flex flex-col">
                  <h4 class="text-sm capitalize text-gray-600">{category}</h4>

                  <p class="text-lg" style={{ fontFamily: value }}>
                    {value}
                  </p>
                </div>
              ))}
            </div>
          </div>
        )
      })
    }
  </div>
</RootLayout>

<script>
  import { isActiveTheme, setTheme, type ThemeMapKey } from '../themes/store'

  document.addEventListener('astro:page-load', () => {
    const themes = document.querySelectorAll<HTMLDivElement>('.theme')

    function onThemeChange() {
      for (const theme of themes) {
        const ind = theme.querySelector<HTMLSpanElement>('.indicator')!

        if (isActiveTheme(theme.dataset.name as ThemeMapKey)) {
          theme.dataset.active = 'true'
          ind.dataset.status = 'applied'
          ind.textContent = 'Applied'
        } else {
          theme.dataset.active = 'false'
          ind.dataset.status = ''
          ind.textContent = 'Apply'
        }
      }
    }

    for (const theme of themes) {
      theme.querySelector('button')!.addEventListener('click', () => {
        const name = theme.dataset.name as ThemeMapKey
        if (isActiveTheme(name)) return

        setTheme(name)
        onThemeChange()
      })
    }

    onThemeChange()
  })
</script>

<style>
  .animate-gradient {
    background-size: 400% !important;
    animation: bg-glow-animation 40s linear infinite;
  }

  @keyframes bg-glow-animation {
    0% {
      background-position: 0 0;
    }
    50% {
      background-position: 400% 0;
    }
    100% {
      background-position: 0 0;
    }
  }
</style>
